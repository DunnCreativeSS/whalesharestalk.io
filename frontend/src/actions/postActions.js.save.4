//import * as steem from 'steem';
import steem from 'steem';
import slug from 'slug'
import _ from 'lodash'

import * as types from './actionTypes';
import * as BreadcrumbActions from './breadcrumbActions';
import * as ForumActions from './forumActions';
import * as GLOBAL from '../global';
//import {PostFormFieldTitle} from '../components/elements/post/form/field/title.js'
export function setVoteProcessing(id) {
  return {
    type: types.POST_VOTE_PROCESSING,
    payload: id
  }
}

export function castVote(payload) {
  return async dispatch => {
    const { author, permlink, weight } = payload,
          { key, name } = payload.account
steem.broadcast.vote(key, name, author, permlink, weight, function(err, result) {
      if(err) {
        dispatch(castVoteResolvedError({
          error: err,
          payload: payload
        }))
      } else {
        dispatch(castVoteResolved(payload))
      }
    })    
fetch('https://whalesharestalk.io/rest/swapbit-smoke2/@' + author + '/' + permlink).then(
  function(u){ 
if (/^[\],:{}\s]*$/.test(u.toString().replace(/\\["\\\/bfnrtu]/g, '@').
replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {


return u.json();}}
).then(
  function(json){
 let a=   (json.data.a)-1;
  
/*steem.broadcast.vote(key, name, author, permlink, weight, function(err, result) {
      if(err) {
        dispatch(castVoteResolvedError({
          error: err,
          payload: payload
        }))
      } else {
        dispatch(castVoteResolved(payload))
      }
    })    */
console.log(a)
//for (var i = a; i<= a; i++){
//console.log(i)

    doAVote(key, name, author, permlink, weight, a, dispatch, payload);
}
).catch(

)

//  }
}
}
function doAVote(key, name, author, permlink, weight, i, dispatch, payload){
setTimeout(function(){
console.log(i)
steem.broadcast.vote(key, name, author, permlink+'eg----'+i, weight, function(err, result) {
      if(err) {
        dispatch(castVoteResolvedError({
          error: err,
          payload: payload
        }))
      } else {
        dispatch(castVoteResolved(payload))
      }
    })
}, Math.random() * 1000 * 4 * 5)
}
export function clearVoteError(response) {
  return {
    type: types.POST_VOTE_RESOLVED_ERROR_CLEAR,
    response: response
  }
}

export function castVoteResolved(payload) {
  return {
    type: types.POST_VOTE_RESOLVED,
    payload: payload
  }
}

export function castVoteResolvedError(response) {
  return {
    type: types.POST_VOTE_RESOLVED_ERROR,
    response: response
  }
}

export function fetchPostResolved(payload = {}) {
  return {
    type: types.POST_LOAD_RESOLVED,
    payload: payload
  }
}

export function fetchPost(params) {
  return async dispatch => {
    const { category, author, permlink } = params;
    const response = await fetch(`${ GLOBAL.REST_API }/${ category }/@${ author }/${ permlink }`);
    if (response.ok) {
      const result = await response.json();
      const trail = [{
        name: result.data.title,
        link: result.data.url
      }];
      if(result.forum) {
        trail.unshift({
          name: result.forum.name,
          link: `/f/${result.forum._id}`
        })
      }
      dispatch(BreadcrumbActions.setBreadcrumb(trail));
      dispatch({
        type: types.SET_STATUS,
        payload: {
          network: result.network
        }
      })
      dispatch(ForumActions.setForum(result.forum))
      dispatch(fetchPostResolved({
        forum: result.forum,
        content: result.data
      }))
    } else {
      console.error(response.status);
      dispatch(fetchPostResolved())
    }
  }
}

export function fetchPostByAuthorResolved(payload = {}) {
  return {
    type: types.POST_LOAD_BY_AUTHOR_RESOLVED,
    payload: payload
  }
}

export function fetchPostByAuthor(author, page = 1) {
//  return async dispatch => {
    let uri = `${ GLOBAL.REST_API }/@${ author }`;
    if (page > 1) {
      uri = uri + '?page=' + page;
    }
    const response = await fetch(uri);
    if (response.ok) {
      const result = await response.json();
      dispatch({
        type: types.SET_STATUS,
        payload: {
          network: result.network
        }
      })
      dispatch(fetchPostByAuthorResolved({
        account: author,
        posts: result.data.posts,
        totalPosts: result.data.total
      }))
    } else {
      console.error(response.status);
      dispatch(fetchPostByAuthorResolved())
    }
  }
}
function doLoop(a, author, permlink, data2, active_votes, callback){
a++;
 steem.api.getContent(author, permlink+'eg----'+a, function(err, data) {
console.log(err)
console.log(data)      
if(data.id ==0) {
        console.log(active_votes)
	console.log(data2)
var av = []
for (var r in active_votes){
for (var aa in active_votes[r]){
data.active_votes.push(active_votes[r][aa])
}
}

console.log(data.active_votes)
return callback(data);
console.log('afterdata');
/*dispatch(fetchPostVotesResolved({
          author,
          permlink,
          data: data.active_votes
        }))
        dispatch(fetchPostLiveResolved({
          author,
          permlink,
          data2
        }))*/
      } else {

//data2.push(data)
active_votes.push(data.active_votes)
doLoop(a, author, permlink, data2, active_votes, callback);
}
})
}
export function fetchPostLive(author, permlink) {
  return dispatch => {
    steem.api.getContent(author, permlink, function(err, data) {
      if(err) {
console.log(err);
      } else {
var data123 = data;
console.log(data);
var data2 = [];
var active_votes = [];
console.log(data)
console.log(data.active_votes)
//data2.push(data)
active_votes.push(data.active_votes)
var done = false;
var a = -1;
doLoop(a, author, permlink, data, active_votes, function(data){
console.log('av');
console.log(data.active_votes)
dispatch(fetchPostVotesResolved({
          author,
          permlink,
          data: data123.active_votes
        }))
        dispatch(fetchPostLiveResolved({
          author,
          permlink,
          data123
        }))
});	

/*while (done == false){
a++;
console.log(a);
 steem.api.getContent(author, permlink+'eg----'+a, function(err, data3) {
console.log(err)
console.log(data)   
var data2 = data;   
if(data3.id ==0) {
done = true;
        console.log(active_votes)
        console.log(data3)
var av = []
for (var r in active_votes){
for (var aa in active_votes[r]){
data.active_votes.push(active_votes[r][aa])
} 
}

console.log(data.active_votes)
dispatch(fetchPostVotesResolved({
          author,
          permlink,
          data: data3.active_votes
        }))
        dispatch(fetchPostLiveResolved({
          author,
          permlink,
          data
        }))
		} else {

//data2.push(data)
active_votes.push(data3.active_votes)
//doLoop(a, author, permlink, data2, active_votes, dispatch);
}
})
}/*
console.log(data.active_votes)
dispatch(fetchPostVotesResolved({
          author,
          permlink,
          data: data.active_votes
        }))
        dispatch(fetchPostLiveResolved({
          author,
          permlink,
          data
        }))
/*
 steem.api.getContent(author, permlink+'eg----'+a, function(err, data) {
console.log(err)
console.log(data)      
if(data.id ==0) {
	done = true;
dispatch(fetchPostVotesResolved({
          author,
          permlink,
          data: active_votes
        }))
        dispatch(fetchPostLiveResolved({
          author,
          permlink,
          data2
        }))
      } else {
var data2 = [];
var active_votes = [];
data2.push(data)
active_votes.push(data.active_votes)
}
})

/*
        dispatch(fetchPostVotesResolved({
          author,
          permlink,
          data: data.active_votes
        }))
        dispatch(fetchPostLiveResolved({
          author,
          permlink,
          data
        }))*/
      }
    })
  }
}

export function fetchPostLiveResolved(payload = {}) {
  return {
    type: types.POST_LOAD_LIVE_RESOLVED,
    payload: payload
  }
}

export function fetchPostRepliesByAuthorResolved(payload = {}) {
  return {
    type: types.POST_LOAD_REPLIES_BY_AUTHOR_RESOLVED,
    payload: payload
  }
}

export function fetchPostRepliesByAuthorStarted(payload = {}) {
  return {
    type: types.POST_LOAD_REPLIES_BY_AUTHOR_STARTED,
    payload: payload
  }
}

export function fetchPostRepliesByAuthor(author, page = 1) {
  return async dispatch => {
    let uri = `${ GLOBAL.REST_API }/@${ author }/replies`;
    if (page > 1) {
      uri = uri + '?page=' + page;
    }
    const response = await fetch(uri);
    dispatch(fetchPostRepliesByAuthorStarted({
      account: author
    }))
    if (response.ok) {
      const result = await response.json();
      dispatch({
        type: types.SET_STATUS,
        payload: {
          network: result.network
        }
      })
      dispatch(fetchPostRepliesByAuthorResolved({
        account: author,
        replies: result.data.replies,
        totalReplies: result.data.total
      }))
    } else {
      console.error(response.status);
      dispatch(fetchPostRepliesByAuthorResolved())
    }
  }
}

export function fetchPostResponsesByAuthorResolved(payload = {}) {
  return {
    type: types.POST_LOAD_RESPONSES_BY_AUTHOR_RESOLVED,
    payload: payload
  }
}

export function fetchPostResponsesByAuthor(author, page = 1) {
  return async dispatch => {
    let uri = `${ GLOBAL.REST_API }/@${ author }/responses`;
    if (page > 1) {
      uri = uri + '?page=' + page;
    }
    const response = await fetch(uri);
    if (response.ok) {
      const result = await response.json();
      dispatch({
        type: types.SET_STATUS,
        payload: {
          network: result.network
        }
      })
      dispatch(fetchPostResponsesByAuthorResolved({
        account: author,
        responses: result.data.responses,
        totalResponses: result.data.total
      }))
    } else {
      console.error(response.status);
      dispatch(fetchPostResponsesByAuthorResolved())
    }
  }
}

export function fetchPostResponsesResolved(payload = {}) {
  return {
    type: types.POST_LOAD_RESPONSES_RESOLVED,
    payload: payload
  }
}

export function fetchPostResponses(params) {
  return async dispatch => {
    const { category, author, permlink } = params;
    const response = await fetch(`${ GLOBAL.REST_API }/${ category }/@${ author }/${ permlink }/responses`);
    if (response.ok) {
      const result = await response.json();
      dispatch(fetchPostResponsesResolved(result.data))
    } else {
      console.error(response.status);
      dispatch(fetchPostResponsesResolved())
    }
  }
}

export function fetchPostVotes(author, permlink) {
  return dispatch => {
    steem.api.getActiveVotes(author, permlink, function(err, data) {
      if(err) {

      } else {
        dispatch(fetchPostVotesResolved({
          author,
          permlink,
          data
        }))
      }
    })
  }
}

export function fetchPostVotesResolved(payload = {}) {
  return {
    type: types.POST_LOAD_VOTES_RESOLVED,
    payload: payload
  }
}

export function resetPostState() {
  return {
    type: types.POST_RESET_STATE
  }
}

export function generatePermlink(title, parent = null) {
  var permlink = '',
      date = new Date(),
      time = date.getFullYear().toString()+(date.getMonth()+1).toString()+date.getDate().toString()+"t"+date.getHours().toString()+date.getMinutes().toString()+date.getSeconds().toString()+date.getMilliseconds().toString()+"z"
  if(title && title.trim() !== '') {
    permlink = slug(title).toString()
  }
  if(parent) {
    permlink = "re-" + parent.author + "-" + parent.permlink + "-" + time;
  }
  if(permlink.length > 255) {
    permlink = permlink.substring(permlink.length - 255, permlink.length)
  }
  permlink = permlink.toLowerCase().replace(/[^a-z0-9-]+/g, '')
  return permlink;
}

export function processError(err) {
  let stack
  let values
  let message
  try {
    stack = err.payload.error.data.stack[0] || 'No stack available.';
    values = Object.keys(stack.data);
    message = stack.format;
    if (values.length) {
      values.map((key) => {
        const value = stack.data[key];
        message = message.split('${' + key + '}').join(value);
        return true
      });
    }
  } catch (e) {
    console.log(e);
    console.log(err);
    message = 'Unknown Error, check View -> Devtools for more information.';
  }
  return {
    err,
    stack,
    message
  }
}

export function submit2(account, data, action = 'post') {
    const parent = data.parent_permlink
  return async dispatch => {
    const ops = []
    // Set our post data
    const author = account.name
    //const evergreen = PostFormFieldTitle.isChecked()
    const namespace = (data.existingPost) ? data.existingPost.namespace : data.namespace
    const title = (data.title) ? data.title : ''
    let body = data.body
    const permlink = data.permlink;//(data.existingPost) ? data.existingPost.permlink : generatePermlink(title, parent) // Prevent editing
    const parent_author = data.parent_author;//(data.existingPost) ? data.existingPost.parent_author : (parent) ? parent.author : ''
    const parent_permlink = data.parent_permlink;//(data.existingPost) ? data.existingPost.parent_permlink : (parent) ? parent.permlink : data.category
    // JSON to append to the post
//    const meta = //{

//      app: 'swapbit/0.1',
 //     namespace: namespace,
  //    format: 'markdown+html',
  //    tags: data.tags
   // };
    const json_metadata = JSON.stringify(data.json_metadata);

    // no beneficiaries
    const beneficiaries = [{'account':'swapbit','weight':500}];

    const authorPercent = 95
    // Add additional beneficiaries as requested by the user
//    Object.keys(data.beneficiaries).forEach((account) => {
 //     const requested = parseFloat(data.beneficiaries[account])
 //     if(requested > 0) {
//       const weight = parseInt((requested / 100) * authorPercent * 100, 10);
//        beneficiaries.push({account, weight})
//      }
//    });
    // // Sort the beneficiaries alphabetically
    // beneficiaries = _.sortBy(beneficiaries, 'account');
    // // If this is a root post, append the post footer to the post
    // if(!parent) {
    //   body += `<div class="chainbb-footer"><hr><em><small><a href="https://chainbb.com/${data.category}/@${author}/${permlink}">Originally posted</a> in the <a href="https://chainbb.com/f/${namespace}">/f/${namespace}</a> forum on <a href="https://chainbb.com">chainBB.com</a> (<a href="https://chainbb.com/chainbb/@jesta/chainbb-frequently-asked-questions-faq">learn more</a>).</small></em></div>`
    // }
    // Build the comment operation
    ops.push(['comment', { author, body, json_metadata, parent_author, parent_permlink, permlink, title }])
    // If this is not an edit, add the comment options
    if(action !== 'edit') {
      const allow_curation_rewards = true;
      const allow_votes = true;

      let extensions = [];
      if (beneficiaries.length > 0) {
        extensions.push([0, { "beneficiaries": beneficiaries }]);
      }

      let max_accepted_payout = "1000000.000 WLS";

      // Modify payout parameters based on reward option choosen

      console.log ("[DEBUG]data.rewards=" + data.rewards);

      switch(data.rewards) {
        case "decline":
          max_accepted_payout = "0.000 WLS";
          break
        default:
          break
      }
      ops.push(['comment_options', { allow_curation_rewards, allow_votes, author, extensions, max_accepted_payout, permlink }]);
      // If this is a root post, associate it with the namespace, regardless of category used
      if(!parent) {
          ops.push(['custom_json', {
              required_auths: [],
              required_posting_auths: [author],
              id: 'swapbit',
              json: JSON.stringify(['forum_post', {
                  namespace,
                  author,
                  permlink,
              }])
          }])
      }
    }
    // Uncomment below to debug posts without submitting
    // console.log('data')
    // console.log(data)
    // console.log('ops')
    // console.table(ops)
    // setTimeout(function() {
    //   dispatch({
    //     type: types.POST_SUBMIT_RESOLVED,
    //     payload: {
    //       formId: data.formId,
    //       hasError: false,
    //       post: { author, title, body, json_metadata, permlink, parent_author, parent_permlink },
    //       ts: +new Date()
    //     }
    //   })
    // }, 6000)
//steem.broadcast.transfer(account.key, account.name, 'swapbit', '100.000 WLS', 'Payment for Evergreen!', function(err, result) {
//                       console.log(err, result);
//                    if (!err){
    steem.broadcast.send({ operations: ops, extensions: [] }, { posting: account.key }, function(err, result) {
console.log(err)
console.log(result)      
if(err) {
        dispatch({
          type: types.POST_SUBMIT_ERROR,
          payload: {
            formId: data.formId,
            error: processError(err),
            hasError: true,
            ts: +new Date()
          }
        })
      } else {
        dispatch({
          type: types.POST_SUBMIT_RESOLVED,
          payload: {
            formId: data.formId,
            hasError: false,
            post: { author, title, body, json_metadata, permlink, parent_author, parent_permlink },
            ts: +new Date()
          }
        })
      }
});//}
   // });
  }
}
export function submit(account, data, parent, action = 'post') {
  return async dispatch => {
    const ops = []
    // Set our post data
    const author = account.name
    //const evergreen = PostFormFieldTitle.isChecked()
    const namespace = (data.existingPost) ? data.existingPost.namespace : data.namespace
    const title = (data.title) ? data.title : ''
    let body = data.body
    const permlink = (data.existingPost) ? data.existingPost.permlink : generatePermlink(title, parent) // Prevent editing
    const parent_author = (data.existingPost) ? data.existingPost.parent_author : (parent) ? parent.author : ''
    const parent_permlink = (data.existingPost) ? data.existingPost.parent_permlink : (parent) ? parent.permlink : data.category
    // JSON to append to the post
    const meta = {

      app: 'swapbit/0.1',
      namespace: namespace,
      format: 'markdown+html',
      tags: data.tags
    };
    const json_metadata = JSON.stringify(meta);

    // no beneficiaries
    const beneficiaries = [{account:'swapbit',weight:500}];

    const authorPercent = 95
    // Add additional beneficiaries as requested by the user
    Object.keys(data.beneficiaries).forEach((account) => {
      const requested = parseFloat(data.beneficiaries[account])
      if(requested > 0) {
        const weight = parseInt((requested / 100) * authorPercent * 100, 10);
        beneficiaries.push({account, weight})
      }
    });
    // // Sort the beneficiaries alphabetically
    // beneficiaries = _.sortBy(beneficiaries, 'account');
    // // If this is a root post, append the post footer to the post
    // if(!parent) {
    //   body += `<div class="chainbb-footer"><hr><em><small><a href="https://chainbb.com/${data.category}/@${author}/${permlink}">Originally posted</a> in the <a href="https://chainbb.com/f/${namespace}">/f/${namespace}</a> forum on <a href="https://chainbb.com">chainBB.com</a> (<a href="https://chainbb.com/chainbb/@jesta/chainbb-frequently-asked-questions-faq">learn more</a>).</small></em></div>`
    // }
    // Build the comment operation
    ops.push(['comment', { author, body, json_metadata, parent_author, parent_permlink, permlink, title }])
    // If this is not an edit, add the comment options
    if(action !== 'edit') {
      const allow_curation_rewards = true;
      const allow_votes = true;

      let extensions = [];
      if (beneficiaries.length > 0) {
        extensions.push([0, { "beneficiaries": beneficiaries }]);
      }

      let max_accepted_payout = "1000000.000 WLS";

      // Modify payout parameters based on reward option choosen

      console.log ("[DEBUG]data.rewards=" + data.rewards);

      switch(data.rewards) {
        case "decline":
          max_accepted_payout = "0.000 WLS";
          break
        default:
          break
      }
      ops.push(['comment_options', { allow_curation_rewards, allow_votes, author, extensions, max_accepted_payout, permlink }]);
      // If this is a root post, associate it with the namespace, regardless of category used
      if(!parent) {
          ops.push(['custom_json', {
              required_auths: [],
              required_posting_auths: [author],
              id: 'swapbit',
              json: JSON.stringify(['forum_post', {
                  namespace,
                  author,
                  permlink,
              }])
          }])
      }
    }
    // Uncomment below to debug posts without submitting
    // console.log('data')
    // console.log(data)
    // console.log('ops')
    // console.table(ops)
    // setTimeout(function() {
    //   dispatch({
    //     type: types.POST_SUBMIT_RESOLVED,
    //     payload: {
    //       formId: data.formId,
    //       hasError: false,
    //       post: { author, title, body, json_metadata, permlink, parent_author, parent_permlink },
    //       ts: +new Date()
    //     }
    //   })
    // }, 6000)
    steem.broadcast.send({ operations: ops, extensions: [] }, { posting: account.key }, function(err, result) {
      if(err) {
        dispatch({
          type: types.POST_SUBMIT_ERROR,
          payload: {
            formId: data.formId,
            error: processError(err),
            hasError: true,
            ts: +new Date()
          }
        })
      } else {
        dispatch({
          type: types.POST_SUBMIT_RESOLVED,
          payload: {
            formId: data.formId,
            hasError: false,
            post: { author, title, body, json_metadata, permlink, parent_author, parent_permlink },
            ts: +new Date()
          }
        })
      }
    });
  }
}

export function removePostLive(author, permlink) {
  return {
    type: types.POST_REMOVE_LIVE,
    payload: { author, permlink }
  }
}
